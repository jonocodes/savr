// generated by Jono

declare module "pdf2html" {
    export interface PdfToHtmlOptions {
      /**
       * Maximum buffer size for the child process (in bytes).
       * Default: 1024 * 2000
       */
      maxBuffer?: number;
    }
  
    export interface PdfToImageOptions extends PdfToHtmlOptions {
      /**
       * Specifies the image type for thumbnail generation.
       * Default: "png"
       */
      imageType?: string;
  
      /**
       * Page number to convert. Defaults to 1.
       */
      page?: number;
  
      /**
       * Width of the resized image.
       * Default: 160
       */
      width?: number;
  
      /**
       * Height of the resized image.
       * Default: 226
       */
      height?: number;
    }
  
    export interface PdfToPagesOptions extends PdfToHtmlOptions {
      /**
       * When true, extracts text only instead of HTML for pages.
       * Default: false
       */
      text?: boolean;
    }
  
    /**
     * Converts a PDF file to an HTML representation.
     * @param filepath - Path to the PDF file.
     * @param options - Options for conversion.
     * @returns The converted HTML as a string.
     */
    export function html(filepath: string, options?: PdfToHtmlOptions): Promise<string>;
  
    /**
     * Converts a PDF file to individual pages, either as text or HTML.
     * @param filepath - Path to the PDF file.
     * @param options - Options for conversion.
     * @returns An array of strings, one for each page.
     */
    export function pages(filepath: string, options?: PdfToPagesOptions): Promise<string[]>;
  
    /**
     * Extracts plain text from a PDF file.
     * @param filepath - Path to the PDF file.
     * @param options - Options for extraction.
     * @returns The extracted text as a string.
     */
    export function text(filepath: string, options?: PdfToHtmlOptions): Promise<string>;
  
    /**
     * Extracts metadata from a PDF file as a JSON object.
     * @param filepath - Path to the PDF file.
     * @param options - Options for extraction.
     * @returns Metadata as a JSON object.
     */
    export function meta(filepath: string, options?: PdfToHtmlOptions): Promise<Record<string, any>>;
  
    /**
     * Generates a thumbnail image for a PDF file.
     * @param filepath - Path to the PDF file.
     * @param options - Options for thumbnail generation.
     * @returns The file path of the generated thumbnail image.
     */
    export function thumbnail(filepath: string, options?: PdfToImageOptions): Promise<string>;
  }
  